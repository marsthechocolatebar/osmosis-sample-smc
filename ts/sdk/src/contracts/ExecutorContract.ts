/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type ExecuteMsg = {
  increment: {
    [k: string]: unknown;
  };
} | {
  reset: {
    count: number;
    [k: string]: unknown;
  };
};
export type SwapAmount = {
  in: Uint128;
} | {
  out: Uint128;
};
export type Uint128 = string;
export interface GetEstimateSwapResponse {
  amount: SwapAmount;
  [k: string]: unknown;
}
export interface GetPoolInfoResponse {
  denom_in: string;
  denom_out: string;
  [k: string]: unknown;
}
export type Decimal = string;
export interface GetSpotPriceResponse {
  price: Decimal;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  count: number;
  [k: string]: unknown;
}
export type QueryMsg = {
  get_estimate_swap: {
    amount: Uint128;
    denom_in: string;
    denom_out: string;
    pool_id: number;
    [k: string]: unknown;
  };
} | {
  get_spot_price: {
    swap: Swap;
    with_swap_fee: boolean;
    [k: string]: unknown;
  };
} | {
  get_pool_info: {
    pool_id: number;
    [k: string]: unknown;
  };
};
export interface Swap {
  denom_in: string;
  denom_out: string;
  pool_id: number;
  [k: string]: unknown;
}
export type Addr = string;
export interface State {
  count: number;
  owner: Addr;
  [k: string]: unknown;
}
export interface ExecutorReadOnlyInterface {
  contractAddress: string;
  getEstimateSwap: ({
    amount,
    denomIn,
    denomOut,
    poolId
  }: {
    amount: string;
    denomIn: string;
    denomOut: string;
    poolId: number;
  }) => Promise<GetEstimateSwapResponse>;
  getSpotPrice: ({
    swap,
    withSwapFee
  }: {
    swap: Swap;
    withSwapFee: boolean;
  }) => Promise<GetSpotPriceResponse>;
  getPoolInfo: ({
    poolId
  }: {
    poolId: number;
  }) => Promise<GetPoolInfoResponse>;
}
export class ExecutorQueryClient implements ExecutorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getEstimateSwap = this.getEstimateSwap.bind(this);
    this.getSpotPrice = this.getSpotPrice.bind(this);
    this.getPoolInfo = this.getPoolInfo.bind(this);
  }

  getEstimateSwap = async ({
    amount,
    denomIn,
    denomOut,
    poolId
  }: {
    amount: string;
    denomIn: string;
    denomOut: string;
    poolId: number;
  }): Promise<GetEstimateSwapResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_estimate_swap: {
        amount,
        denom_in: denomIn,
        denom_out: denomOut,
        pool_id: poolId
      }
    });
  };
  getSpotPrice = async ({
    swap,
    withSwapFee
  }: {
    swap: Swap;
    withSwapFee: boolean;
  }): Promise<GetSpotPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_spot_price: {
        swap,
        with_swap_fee: withSwapFee
      }
    });
  };
  getPoolInfo = async ({
    poolId
  }: {
    poolId: number;
  }): Promise<GetPoolInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_pool_info: {
        pool_id: poolId
      }
    });
  };
}
export interface ExecutorInterface extends ExecutorReadOnlyInterface {
  contractAddress: string;
  sender: string;
  increment: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  reset: ({
    count
  }: {
    count: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class ExecutorClient extends ExecutorQueryClient implements ExecutorInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.increment = this.increment.bind(this);
    this.reset = this.reset.bind(this);
  }

  increment = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      increment: {}
    }, fee, memo, funds);
  };
  reset = async ({
    count
  }: {
    count: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reset: {
        count
      }
    }, fee, memo, funds);
  };
}