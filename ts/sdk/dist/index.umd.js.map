{"version":3,"file":"index.umd.js","sources":["../src/contracts/ExecutorContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  increment: {\n    [k: string]: unknown;\n  };\n} | {\n  reset: {\n    count: number;\n    [k: string]: unknown;\n  };\n};\nexport type SwapAmount = {\n  in: Uint128;\n} | {\n  out: Uint128;\n};\nexport type Uint128 = string;\nexport interface GetEstimateSwapResponse {\n  amount: SwapAmount;\n  [k: string]: unknown;\n}\nexport interface GetPoolInfoResponse {\n  denom_in: string;\n  denom_out: string;\n  [k: string]: unknown;\n}\nexport type Decimal = string;\nexport interface GetSpotPriceResponse {\n  price: Decimal;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  count: number;\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  get_estimate_swap: {\n    amount: Uint128;\n    denom_in: string;\n    denom_out: string;\n    pool_id: number;\n    [k: string]: unknown;\n  };\n} | {\n  get_spot_price: {\n    swap: Swap;\n    with_swap_fee: boolean;\n    [k: string]: unknown;\n  };\n} | {\n  get_pool_info: {\n    pool_id: number;\n    [k: string]: unknown;\n  };\n};\nexport interface Swap {\n  denom_in: string;\n  denom_out: string;\n  pool_id: number;\n  [k: string]: unknown;\n}\nexport type Addr = string;\nexport interface State {\n  count: number;\n  owner: Addr;\n  [k: string]: unknown;\n}\nexport interface ExecutorReadOnlyInterface {\n  contractAddress: string;\n  getEstimateSwap: ({\n    amount,\n    denomIn,\n    denomOut,\n    poolId\n  }: {\n    amount: string;\n    denomIn: string;\n    denomOut: string;\n    poolId: number;\n  }) => Promise<GetEstimateSwapResponse>;\n  getSpotPrice: ({\n    swap,\n    withSwapFee\n  }: {\n    swap: Swap;\n    withSwapFee: boolean;\n  }) => Promise<GetSpotPriceResponse>;\n  getPoolInfo: ({\n    poolId\n  }: {\n    poolId: number;\n  }) => Promise<GetPoolInfoResponse>;\n}\nexport class ExecutorQueryClient implements ExecutorReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getEstimateSwap = this.getEstimateSwap.bind(this);\n    this.getSpotPrice = this.getSpotPrice.bind(this);\n    this.getPoolInfo = this.getPoolInfo.bind(this);\n  }\n\n  getEstimateSwap = async ({\n    amount,\n    denomIn,\n    denomOut,\n    poolId\n  }: {\n    amount: string;\n    denomIn: string;\n    denomOut: string;\n    poolId: number;\n  }): Promise<GetEstimateSwapResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_estimate_swap: {\n        amount,\n        denom_in: denomIn,\n        denom_out: denomOut,\n        pool_id: poolId\n      }\n    });\n  };\n  getSpotPrice = async ({\n    swap,\n    withSwapFee\n  }: {\n    swap: Swap;\n    withSwapFee: boolean;\n  }): Promise<GetSpotPriceResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_spot_price: {\n        swap,\n        with_swap_fee: withSwapFee\n      }\n    });\n  };\n  getPoolInfo = async ({\n    poolId\n  }: {\n    poolId: number;\n  }): Promise<GetPoolInfoResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_pool_info: {\n        pool_id: poolId\n      }\n    });\n  };\n}\nexport interface ExecutorInterface extends ExecutorReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  increment: (fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  reset: ({\n    count\n  }: {\n    count: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class ExecutorClient extends ExecutorQueryClient implements ExecutorInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  increment = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      increment: {}\n    }, fee, memo, funds);\n  };\n  reset = async ({\n    count\n  }: {\n    count: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      reset: {\n        count\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":[],"mappings":"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"}