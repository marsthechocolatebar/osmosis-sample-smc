{"version":3,"file":"index.umd.min.js","sources":["../src/contracts/ExecutorContract.ts"],"sourcesContent":["/**\n* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.\n* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n* and run the cosmwasm-typescript-gen generate command to regenerate this file.\n*/\n\nimport { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from \"@cosmjs/cosmwasm-stargate\";\nimport { Coin, StdFee } from \"@cosmjs/amino\";\nexport type ExecuteMsg = {\n  increment: {\n    [k: string]: unknown;\n  };\n} | {\n  reset: {\n    count: number;\n    [k: string]: unknown;\n  };\n};\nexport type SwapAmount = {\n  in: Uint128;\n} | {\n  out: Uint128;\n};\nexport type Uint128 = string;\nexport interface GetEstimateSwapResponse {\n  amount: SwapAmount;\n  [k: string]: unknown;\n}\nexport interface GetPoolInfoResponse {\n  denom_in: string;\n  denom_out: string;\n  [k: string]: unknown;\n}\nexport type Decimal = string;\nexport interface GetSpotPriceResponse {\n  price: Decimal;\n  [k: string]: unknown;\n}\nexport interface InstantiateMsg {\n  count: number;\n  [k: string]: unknown;\n}\nexport type QueryMsg = {\n  get_estimate_swap: {\n    amount: Uint128;\n    denom_in: string;\n    denom_out: string;\n    pool_id: number;\n    [k: string]: unknown;\n  };\n} | {\n  get_spot_price: {\n    swap: Swap;\n    with_swap_fee: boolean;\n    [k: string]: unknown;\n  };\n} | {\n  get_pool_info: {\n    pool_id: number;\n    [k: string]: unknown;\n  };\n};\nexport interface Swap {\n  denom_in: string;\n  denom_out: string;\n  pool_id: number;\n  [k: string]: unknown;\n}\nexport type Addr = string;\nexport interface State {\n  count: number;\n  owner: Addr;\n  [k: string]: unknown;\n}\nexport interface ExecutorReadOnlyInterface {\n  contractAddress: string;\n  getEstimateSwap: ({\n    amount,\n    denomIn,\n    denomOut,\n    poolId\n  }: {\n    amount: string;\n    denomIn: string;\n    denomOut: string;\n    poolId: number;\n  }) => Promise<GetEstimateSwapResponse>;\n  getSpotPrice: ({\n    swap,\n    withSwapFee\n  }: {\n    swap: Swap;\n    withSwapFee: boolean;\n  }) => Promise<GetSpotPriceResponse>;\n  getPoolInfo: ({\n    poolId\n  }: {\n    poolId: number;\n  }) => Promise<GetPoolInfoResponse>;\n}\nexport class ExecutorQueryClient implements ExecutorReadOnlyInterface {\n  client: CosmWasmClient;\n  contractAddress: string;\n\n  constructor(client: CosmWasmClient, contractAddress: string) {\n    this.client = client;\n    this.contractAddress = contractAddress;\n    this.getEstimateSwap = this.getEstimateSwap.bind(this);\n    this.getSpotPrice = this.getSpotPrice.bind(this);\n    this.getPoolInfo = this.getPoolInfo.bind(this);\n  }\n\n  getEstimateSwap = async ({\n    amount,\n    denomIn,\n    denomOut,\n    poolId\n  }: {\n    amount: string;\n    denomIn: string;\n    denomOut: string;\n    poolId: number;\n  }): Promise<GetEstimateSwapResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_estimate_swap: {\n        amount,\n        denom_in: denomIn,\n        denom_out: denomOut,\n        pool_id: poolId\n      }\n    });\n  };\n  getSpotPrice = async ({\n    swap,\n    withSwapFee\n  }: {\n    swap: Swap;\n    withSwapFee: boolean;\n  }): Promise<GetSpotPriceResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_spot_price: {\n        swap,\n        with_swap_fee: withSwapFee\n      }\n    });\n  };\n  getPoolInfo = async ({\n    poolId\n  }: {\n    poolId: number;\n  }): Promise<GetPoolInfoResponse> => {\n    return this.client.queryContractSmart(this.contractAddress, {\n      get_pool_info: {\n        pool_id: poolId\n      }\n    });\n  };\n}\nexport interface ExecutorInterface extends ExecutorReadOnlyInterface {\n  contractAddress: string;\n  sender: string;\n  increment: (fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n  reset: ({\n    count\n  }: {\n    count: number;\n  }, fee?: number | StdFee | \"auto\", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;\n}\nexport class ExecutorClient extends ExecutorQueryClient implements ExecutorInterface {\n  client: SigningCosmWasmClient;\n  sender: string;\n  contractAddress: string;\n\n  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {\n    super(client, contractAddress);\n    this.client = client;\n    this.sender = sender;\n    this.contractAddress = contractAddress;\n    this.increment = this.increment.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  increment = async (fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      increment: {}\n    }, fee, memo, funds);\n  };\n  reset = async ({\n    count\n  }: {\n    count: number;\n  }, fee: number | StdFee | \"auto\" = \"auto\", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {\n    return await this.client.execute(this.sender, this.contractAddress, {\n      reset: {\n        count\n      }\n    }, fee, memo, funds);\n  };\n}"],"names":["ExecutorQueryClient","client","contractAddress","_this","this","getEstimateSwap","_a","amount","denomIn","denomOut","poolId","queryContractSmart","get_estimate_swap","denom_in","denom_out","pool_id","getSpotPrice","swap","withSwapFee","get_spot_price","with_swap_fee","getPoolInfo","get_pool_info","bind","ExecutorClient","_super","sender","call","increment","fee","memo","funds","execute","reset","count","_b","__extends"],"mappings":";;;;;gxDAoGA,IAAAA,EAIE,SAAYC,EAAwBC,GAApC,IAMCC,EAAAC,KAEDA,KAAeC,gBAAG,SAAOC,OACvBC,EAAMD,EAAAC,OACNC,EAAOF,EAAAE,QACPC,EAAQH,EAAAG,SACRC,EAAMJ,EAAAI,uEAON,MAAO,CAAA,EAAAN,KAAKH,OAAOU,mBAAmBP,KAAKF,gBAAiB,CAC1DU,kBAAmB,CACjBL,OAAMA,EACNM,SAAUL,EACVM,UAAWL,EACXM,QAASL,aAIfN,KAAYY,aAAG,SAAOV,OACpBW,EAAIX,EAAAW,KACJC,EAAWZ,EAAAY,4EAKX,MAAO,CAAA,EAAAd,KAAKH,OAAOU,mBAAmBP,KAAKF,gBAAiB,CAC1DiB,eAAgB,CACdF,KAAIA,EACJG,cAAeF,aAIrBd,KAAWiB,YAAG,SAAOf,GACnB,IAAAI,EAAMJ,EAAAI,uEAIN,MAAO,CAAA,EAAAN,KAAKH,OAAOU,mBAAmBP,KAAKF,gBAAiB,CAC1DoB,cAAe,CACbP,QAASL,aAhDbN,KAAKH,OAASA,EACdG,KAAKF,gBAAkBA,EACvBE,KAAKC,gBAAkBD,KAAKC,gBAAgBkB,KAAKnB,MACjDA,KAAKY,aAAeZ,KAAKY,aAAaO,KAAKnB,MAC3CA,KAAKiB,YAAcjB,KAAKiB,YAAYE,KAAKnB,KAC1C,EA0DHoB,EAAA,SAAAC,GAKE,SAAAD,EAAYvB,EAA+ByB,EAAgBxB,GAA3D,IAAAC,EACEsB,EAAME,KAAAvB,KAAAH,EAAQC,IAMfE,YAEDD,EAAAyB,UAAY,SAAOC,EAAwCC,EAAeC,eAAvD,IAAAF,IAAAA,EAAsC,iFAChD,KAAA,EAAA,MAAA,CAAA,EAAMzB,KAAKH,OAAO+B,QAAQ5B,KAAKsB,OAAQtB,KAAKF,gBAAiB,CAClE0B,UAAW,CAAE,GACZC,EAAKC,EAAMC,IAFd,KAAA,EAAA,MAAA,CAAA,EAAOzB,kBAITH,EAAK8B,MAAG,SAAO3B,EAIZuB,EAAwCC,EAAeC,GAHxD,IAAAG,EAAK5B,EAAA4B,kBAGJ,IAAAL,IAAAA,EAAsC,iFAChC,KAAA,EAAA,MAAA,CAAA,EAAMzB,KAAKH,OAAO+B,QAAQ5B,KAAKsB,OAAQtB,KAAKF,gBAAiB,CAClE+B,MAAO,CACLC,MAAKA,IAENL,EAAKC,EAAMC,IAJd,KAAA,EAAA,MAAA,CAAA,EAAOI,kBAjBPhC,EAAKF,OAASA,EACdE,EAAKuB,OAASA,EACdvB,EAAKD,gBAAkBA,EACvBC,EAAKyB,UAAYzB,EAAKyB,UAAUL,KAAKpB,GACrCA,EAAK8B,MAAQ9B,EAAK8B,MAAMV,KAAKpB,IAC9B,CAkBH,0PA9BoCiC,CAAmBZ,EAAAC,GA8BtDD,CAAD,CA9BA,CAAoCxB"}